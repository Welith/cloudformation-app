Description: >
  Boris / Server config for web-app infrastructure

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    KeyPairName:
      Description: PEM file name.
      Type: String
      Default: 'udacity-dev.pem'

    AppS3Bucket:
      Description: Full S3 path and file name of zipped file.
      Type: String
      Default: 's3://html-udacity/udacity.zip'

    
    DesiredServerCapacity:
      Description: Specify the desired capacity for AutoScalingGroup
      Type: String
      Default: '4'

    DesiredServerCapacityMin:
      Description: Specify min desired capacity for AutoScalingGroup
      Type: String
      Default: '2'


    DesiredServerCapacityMax:
      Description: Specify max desired capacity for AutoScalingGroup
      Type: String
      Default: '4'

Resources:
    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Load Balancer Security Group
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: WWW Security Group
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref LBSecGroup
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
          - SourceSecurityGroupId: !Ref BastionSecurityGroup
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22

    BastionSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Bastion Security Group
        VpcId:
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
        Tags:
          - Key: Name
            Value: !Sub "${EnvironmentName} Bastion Security Group"

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            mkdir html
            aws s3 cp ${AppS3Bucket} html
            unzip -o html/udacity.zip -d html
            sudo chown -R www-data:www-data html
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo apt-key fingerprint 0EBFCD88
            add-apt-repository \
              "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) \
              stable"
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
            usermod -aG docker ubuntu
            docker run -dit --name ${EnvironmentName} -p 80:80 -v "$PWD"/html:/usr/local/apache2/htdocs/ httpd:latest
        ImageId: ami-005bdb005fb00e791
        SecurityGroups:
          - Ref: WebServerSecGroup
        InstanceType: t3.medium
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"
    
    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName: !Ref WebAppLaunchConfig
        DesiredCapacity: !Ref DesiredServerCapacity
        MinSize: !Ref DesiredServerCapacityMin
        MaxSize: !Ref DesiredServerCapacityMax
        MetricsCollection:
          - Granularity: "1Minute"
            Metrics:
              - "GroupMinSize"
              - "GroupMaxSize"
        TargetGroupARNs:
          - Ref: WebAppTargetGroup
    
    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
          - Ref: LBSecGroup
    
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP
    
    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

    BastionPublicSubnet1:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-06f2f779464715dc5
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SubnetId:
          Fn::ImportValue: 
            Fn::Sub: "${EnvironmentName}-PUB1-SN"
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        SecurityGroupIds:
          - Ref: BastionSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Bastion 1

    BastionPublicSubnet2:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-06f2f779464715dc5
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SubnetId:
          Fn::ImportValue: 
            Fn::Sub: "${EnvironmentName}-PUB2-SN"
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        SecurityGroupIds:
          - Ref: BastionSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Bastion 2

    BucketRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
    
    BucketPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: BucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:List*
            Resource: "*"
        Roles:
        - Ref: BucketRole

    BucketProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - Ref: BucketRole

Outputs:

    LBDNSName:
      Description: Load Balancer DNS Name
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
      Export:
        Name: !Sub "${EnvironmentName}-LB-DNS-NAME"